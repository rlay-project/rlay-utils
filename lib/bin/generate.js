#!/usr/bin/env node
"use strict";function _arrayWithoutHoles(e){if(Array.isArray(e)){for(var r=0,t=Array(e.length);e.length>r;r++)t[r]=e[r];return t}}var arrayWithoutHoles=_arrayWithoutHoles,arrayWithoutHoles$1=Object.freeze({default:arrayWithoutHoles,__moduleExports:arrayWithoutHoles});function _iterableToArray(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}var iterableToArray=_iterableToArray,iterableToArray$1=Object.freeze({default:iterableToArray,__moduleExports:iterableToArray});function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}var nonIterableSpread=_nonIterableSpread,nonIterableSpread$1=Object.freeze({default:nonIterableSpread,__moduleExports:nonIterableSpread}),arrayWithoutHoles$2=arrayWithoutHoles$1&&arrayWithoutHoles||arrayWithoutHoles$1,iterableToArray$2=iterableToArray$1&&iterableToArray||iterableToArray$1,nonIterableSpread$2=nonIterableSpread$1&&nonIterableSpread||nonIterableSpread$1;function _toConsumableArray(e){return arrayWithoutHoles$2(e)||iterableToArray$2(e)||nonIterableSpread$2()}var toConsumableArray=_toConsumableArray,fs=require("fs"),path=require("path"),esformatter=require("esformatter"),schemas={},schemaPath=path.join(process.cwd(),"schema");fs.readdirSync(schemaPath).forEach(function(e){schemas[e.split(".").shift()]=require(path.join(schemaPath,e))});var generateCode=function(e){return"const fs = require('fs');\n  const path = require('path');\n  const ontology = require('../../utils/ontology.js');\n\n  const schemaSeeded = JSON.parse(\n    fs.readFileSync(path.join(__dirname, '../../build/schema/seed.json'), 'utf8'));\n\n  module.exports = {};\n\n  ".concat(e)},capitalizeFirstLetter=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},generateClassesCode=function(e){return Object.keys(e).map(function(r){if("Class"===e[r].type)return"\n      module.exports.store".concat(capitalizeFirstLetter(r),"Assertion = (subject) => {\n        return ontology.storeClassAssertion({\n          subject: subject || '0x00',\n          class: schemaSeeded.").concat(r,",\n        });\n      }")}).filter(function(e){return e})},generateDPsCode=function(e){return Object.keys(e).map(function(r){if("DataProperty"===e[r].type)return"\n      module.exports.store".concat(capitalizeFirstLetter(r),"Assertion = (target, subject) => {\n        return ontology.storeDataPropertyAssertion({\n          subject: subject || '0x00',\n          target: target,\n          property: schemaSeeded.").concat(r,",\n        });\n      }")}).filter(function(e){return e})},generateOPsCode=function(e){return Object.keys(e).map(function(r){if("ObjectProperty"===e[r].type)return"\n      module.exports.store".concat(capitalizeFirstLetter(r),"Assertion = (subject, object) => {\n        return ontology.storeObjectPropertyAssertion({\n          subject: subject,\n          target: object,\n          property: schemaSeeded.").concat(r,",\n        });\n      }")}).filter(function(e){return e})},assertions=Object.keys(schemas).map(function(e){var r=[];return schemas[e].classes&&r.push(generateClassesCode(schemas[e].classes())),schemas[e].dataProperties&&r.push(generateDPsCode(schemas[e].dataProperties())),schemas[e].objectProperties&&r.push(generateOPsCode(schemas[e].objectProperties())),r.reduce(function(e,r){return toConsumableArray(e).concat(toConsumableArray(r))},[])}).reduce(function(e,r){return toConsumableArray(e).concat(toConsumableArray(r))},[]),source=esformatter.format(generateCode(assertions.join("")));fs.writeFileSync(path.join(process.cwd(),"./generated/rlay-client/index.js"),source,"utf8");
